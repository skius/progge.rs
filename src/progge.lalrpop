use std::str::FromStr;
use proggers::ast::*;
use proggers::tc::*;


grammar(filename: &str, src: &str, tctx: &mut VariableTypeContext);

// Ignore comments
match {
    r"\s*" => { }, // The default whitespace skipping is disabled an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },  // Skip `/* comments */`
    _
}

WithLoc<T>: WithLoc<T> = {
    <start:@L> <elem:T> <end:@R> => WithLoc { elem: elem, loc: loc_from_offset(src, start, end) },
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

// Left-assoc
TierL<Op,NextTier>: Expr = {
    <left:WithLoc<TierL<Op,NextTier>>> <op:Op> <right:WithLoc<NextTier>> => Expr::BinOp(op, Box::new(left), Box::new(right)),
    NextTier => <>
};

pub ProgramL = WithLoc<Program>;
pub Program: Program = {
    <fns: FuncDefL*> => Program(fns),
}

// These two non-terminals only exist for their side-effects
// TODO: consider getting rid of this parse-time type-checking completely
OpenScope: () = {
    => {
        tctx.new_scope();
    },
}
CloseScope: () = {
    => {
        tctx.close_scope();
    },
}

pub FuncDefL = WithLoc<FuncDef>;
pub FuncDef: FuncDef = {
    OpenScope "fn" <name:NameL> "(" <params:WithLoc<Comma<Param>>> ")" <empty_retty_loc:@L> <retty:("->" <TypeL>)?> "{"
        <body:BlockL>
    "}" CloseScope => FuncDef { name:name, params: params, retty: match retty {
        Some(retty) => retty,
        None => WithLoc { elem: Type::Unit, loc: loc_from_offset(src, empty_retty_loc, empty_retty_loc) },
    }, body: body },
}

Param: (WithLoc<Var>, WithLoc<Type>) = {
    <name:NameL> ":" <typ:TypeL> => {
        let loc = name.loc;
        tctx.insert(name.elem.clone(), (*typ).clone());
        (WithLoc { elem: Var(name.elem, typ.elem.clone()), loc: loc }, typ.clone())
    },
}

pub BlockL = WithLoc<Block>;
pub Block: Block = {
    (StmtDelimitedL)* => {
        // println!("{:?} {:?}", start, end);
        // println!("{:?}", src);
        Block(<>)
    },
}

pub StmtDelimitedL: WithLoc<Stmt> = {
    <StmtL> ";",
    <StmtBlockL>,
}

// EmptyBlockL = WithLoc<EmptyBlock>;
// EmptyBlock: Block = {
//      => Block(vec![]),
// }

// no trailing semi-colons
pub StmtBlockL = WithLoc<StmtBlock>;
pub StmtBlock: Stmt = {
    OpenScope "if" <e:ExprL> "{"
        <if_b:BlockL>
    "}" <empty_else:@L> CloseScope => Stmt::IfElse { cond: e, if_branch: if_b, else_branch:
        WithLoc { elem: Block(vec![]), loc: loc_from_offset(src, empty_else, empty_else) },
    },
    OpenScope "if" <e:ExprL> "{"
        <if_b:BlockL>
    "}" "else" "{"
        <else_b:BlockL>
    "}" CloseScope => Stmt::IfElse { cond: e, if_branch: if_b, else_branch: else_b },
    OpenScope "while" <e:ExprL> "{"
        <b:BlockL>
    "}" CloseScope => Stmt::While { cond: e, block: b },
}

// need trailing semi-bolon
pub StmtL = WithLoc<Stmt>;
pub Stmt: Stmt = {
    "testcase!" => Stmt::Testcase(),
    "unreachable!" => Stmt::Unreachable(),
    "return" <e:ExprL?> => Stmt::Return(e),
    "let" <n:NameL> "=" <e:ExprL> => {
        let t = type_of(&e);
        let loc = n.loc;
        tctx.insert(n.elem.clone(), t.clone());
        Stmt::Decl(WithLoc { elem: Var(n.elem, t.clone()), loc: loc}, e)
    },
    <le:LocExprL> "=" <e:ExprL> => {
        Stmt::Assn(le, e)
    },
}

LocExprL = WithLoc<LocExpr>;
LocExpr: LocExpr = {
    <n:NameL> => {
        let var = Var(n.elem, Type::Unknown);
        LocExpr::Var(WithLoc { elem: var, loc: n.loc})
    },
    <arr:LeafExprL> "[" <idx:ExprL> "]" => {
        LocExpr::Index(arr, idx)
    },
}

ExprL = {
    BExpr0L,
}

// ||
BExpr0L = WithLoc<BExpr0>;
BExpr0 = TierL<BExpr0OpL, BExpr1>;
// &&
//BExpr1L = WithLoc<BExpr1>;
BExpr1 = TierL<BExpr1OpL, BExpr2>;
// == !=
//BExpr2L = WithLoc<BExpr2>;
BExpr2 = TierL<BExpr2OpL, BExpr3>;
// < <= > >=
//BExpr3L = WithLoc<BExpr3>;
BExpr3 = TierL<RopcodeL, IExpr0>;

// + -
//IExpr0L = WithLoc<IExpr0>;
IExpr0 = TierL<IExpr0OpL, IExpr1>;
// * % /
//IExpr1L = WithLoc<IExpr1>;
IExpr1 = TierL<IExpr1OpL, UnExpr>;

UnExprL = WithLoc<UnExpr>;
UnExpr: Expr = {
    <op:IUnOpL> <e:UnExprL> => Expr::UnOp(op, Box::new(e)),
    <op:BUnOpL> <e:UnExprL> => Expr::UnOp(op, Box::new(e)),
    LeafExpr,
}

LeafExprL = WithLoc<LeafExpr>;
LeafExpr: Expr = {
    Int => Expr::IntLit(<>),
    "true" => Expr::BoolLit(true),
    "false" => Expr::BoolLit(false),
    <n:NameL> "(" <args:WithLoc<Comma<ExprL>>> ")" => Expr::Call(n, args),
    "[" <elems:WithLoc<Comma<ExprL>>> "]" => Expr::Array(elems),
    <arr:LeafExprL> "[" <idx:ExprL> "]" => Expr::Index(Box::new(arr), Box::new(idx)),
    <n:NameL> => {
 // TODO: instead of panicking, I could use a placeholder type here to complete the parse
        let t = tctx.lookup(&n).unwrap_or_else(|| {
            // println!("{}:{}:{}: used variable \"{}\" before definition", filename, n.loc.line, n.loc.col, n.elem);
            // panic!("variable use before defined");
            // We are implementing above TODO currently.
            Type::Unit
        });
        let loc = n.loc;
        Expr::Var(WithLoc { elem: Var(n.elem, t), loc: loc })
    },
//    <op:IUnOpL> <e:LeafExprL> => Expr::UnOp(op, Box::new(e)),
//    <op:BUnOpL> <e:LeafExprL> => Expr::UnOp(op, Box::new(e)),
    "(" <BExpr0> ")" => <>,

}

BExpr0OpL = WithLoc<BExpr0Op>;
BExpr0Op: BinOpcode = {
    "||" => BinOpcode::Or,
}

BExpr1OpL = WithLoc<BExpr1Op>;
BExpr1Op: BinOpcode = {
    "&&" => BinOpcode::And,
}

BExpr2OpL = WithLoc<BExpr2Op>;
BExpr2Op: BinOpcode = {
    "==" => BinOpcode::Eq,
    "!=" => BinOpcode::Ne,
}

BUnOpL = WithLoc<BUnOp>;
BUnOp: UnOpcode = {
    "!" => UnOpcode::Not,
}

RopcodeL = WithLoc<Ropcode>;
Ropcode: BinOpcode = {
    "<" => BinOpcode::Lt,
    "<=" => BinOpcode::Le,
    ">" => BinOpcode::Gt,
    ">=" => BinOpcode::Ge,
}

IExpr0OpL = WithLoc<IExpr0Op>;
IExpr0Op: BinOpcode = {
    "+" => BinOpcode::Add,
    "-" => BinOpcode::Sub,
}

IExpr1OpL = WithLoc<IExpr1Op>;
IExpr1Op: BinOpcode = {
    "*" => BinOpcode::Mul,
    "/" => BinOpcode::Div,
    "%" => BinOpcode::Mod,
}

IUnOpL = WithLoc<IUnOp>;
IUnOp: UnOpcode = {
    "-" => UnOpcode::Neg,
}

TypeL = WithLoc<Type>;
Type: Type = {
    "int" => Type::Int,
    "bool" => Type::Bool,
    "unit" => Type::Unit,
    "[" <t:TypeL> "]" => Type::Array(Box::new(t)),

}

//VarL: WithLoc<Var> = {
//    <name:WithLoc<Name>> => WithLoc { elem: Var(name.elem), loc: name.loc },
//}

NameL = WithLoc<Name>;
Name: String = r"[A-Za-z_][A-Za-z0-9_]*" => (<>).to_owned();

IntL = WithLoc<Int>;
Int: i64 = r"[0-9]+" => i64::from_str(<>).unwrap();