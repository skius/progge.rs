fn analyze() {
    let x = 0;
    let arr = some_arr();
    if x > arr[2] && x < -100 {
        // will never be taken, even though we know nothing about arr[2]
        x = 2;
    }
    let barr = some_barr();
    if x < arr[2] && barr[0] {
        // should still be taken, since we know nothing about arr[2] or barr[0]
        x = -2;
    } else {
        if x < arr[2] && !barr[0] {
            // should also be taken
            x = -3;
        }
    }

    // x can be 0 or -2 or -3
    return;
}

fn some_barr() -> [bool] {
    return [false];
}

fn some_arr() -> [int] {
    let explicit = [1, 2, 3];
    let default = [0; 3];
    return default;
}